@page "/CreateAccount"
@using BlazorOpenBank.Data
@using BlazorOpenBank.Data.Models
@using BlazorOpenBank.Data.Services
@using BlazorOpenBank.Data.Models.APIcontracts
@using BlazorOpenBank.Data.Models.APImodels
@using Microsoft.AspNetCore.Mvc
@attribute [Authorize]
@inject HttpClient httpclient
@inject NavigationManager NavigationManager
@inject IAccountService AccountService

<div class="card">
    <h4 class="card-header">Register</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Balance</label>
                <InputNumber @bind-Value="model.Balance" class="form-control" />
                <ValidationMessage For="@(() => model.Balance)" />
            </div>
            <div class="form-group">
                <label>Currency</label>
                <InputSelect @bind-Value="model.Currency">
                    <option value="@Currency.BRL">BRL</option>
                    <option value="@Currency.EUR">EUR</option>
                    <option value="@Currency.USD">USD</option>
                </InputSelect>

            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Create Account
            </button>
            <NavLink href="/accounts" class="btn btn-link">Cancel</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private CreateAccountRequest model = new CreateAccountRequest();
    private bool loading;

    enum Currency
        {
            EUR,
            USD,
            BRL
        };

    private async void OnValidSubmit()
    {
        // reset alerts on submit
       

        loading = true;
        try
        {
            await AccountService.CreateAccount(model);
            NavigationManager.NavigateTo("/accounts");
        }
        catch (Exception ex)
        {
            loading = false;
            StateHasChanged();
        }
    }
}