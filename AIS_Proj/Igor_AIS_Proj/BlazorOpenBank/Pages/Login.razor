
@using BlazorOpenBank.Data
@using BlazorOpenBank.Data.Services
@using BlazorOpenBank.Data.Models
@using BlazorOpenBank.Helpers
@using Blazorise
@using Microsoft.AspNetCore.Mvc

@page "/Login"
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject IAccountService AccountService
@inject IJSRuntime JSRuntime


<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="model.Email" class="form-control" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.UserPassword" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.UserPassword)" />
            </div>
            <button disabled="@loading"  Color="Color.Primary" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
          
        </EditForm>
    </div>
</div>

@code {

    private bool loading;
    private LoginUserRequest? model = new LoginUserRequest();


    [BindProperty]
    public LoginUserRequest LoginRequest { get; set; }

    public string ReturnUrl { get; set; }

    public string Result { get; set; }

    public bool ShowSignInErrors { get; set; }

    public bool IsProcessing { get; set; } = false;




    public void OnGet()
    {
    }
    private async void OnValidSubmit()
    {

        loading = true;
        try
        {
            var result = await AccountService.Login(model);
            if(result.IsSuccessStatusCode)
            {
                var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
                NavigationManager.NavigateTo(returnUrl);
                
            }
        }   
        catch (Exception ex)
        {
            loading = false;
            StateHasChanged();

        }
          
    }
    
}
