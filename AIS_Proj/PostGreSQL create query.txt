DROP TABLE IF EXISTS Transfers;
DROP TABLE IF EXISTS Accounts;
DROP TABLE IF EXISTS Users;



CREATE TABLE Users (
   UserId integer GENERATED always AS identity PRIMARY KEY,
   Created_at TIMESTAMPTZ DEFAULT NOW(),
   Email varchar(50) not NULL unique,
   Username varchar(25) not NULL unique,
   UserPassword varchar(50) not null,
   PasswordSalt varchar(250) null,
   UserToken varchar(600),
   UpdatedAt TIMESTAMPTZ DEFAULT NOW()
);
CREATE TABLE Accounts (
   AccountId integer GENERATED always AS identity PRIMARY KEY,
   UserId integer not NULL,
   Created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
   Currency varchar(15) not NULL,
   Balance NUMERIC(10) not NULL,
   UpdatedAt TIMESTAMPTZ NOT NULL DEFAULT NOW(),
   constraint fk_user
   FOREIGN KEY (UserId)
	REFERENCES Users (UserId) ON DELETE CASCADE
);
CREATE TABLE Movements (
   MovementId integer GENERATED always AS identity PRIMARY KEY,
   AccountId integer not null,
   Amount NUMERIC(10) not NULL,
   Currency varchar(3) not null default ('EUR'),
   MovimentTime TIMESTAMPTZ NOT NULL DEFAULT NOW(),
   CONSTRAINT AccountId_FK FOREIGN KEY (AccountId)
        REFERENCES Accounts (AccountId)
);

create table Transfers(
	TransferId integer GENERATED always AS identity PRIMARY KEY,
	OriginAccountId integer not NULL,
    DestinationAccountId integer not NULL,
	Amount NUMERIC(10) not null,
	Currency varchar(15) not NULL,
	TransferDate TIMESTAMPTZ not null default NOW(),
	    CONSTRAINT AmountIsValid_CK        CHECK       (Amount > 0),
	    CONSTRAINT AccountsAreDistinct_CK  CHECK       (DestinationAccountId <> OriginAccountId)
);

CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updatedAt = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON Users
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

